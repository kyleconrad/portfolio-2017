/* All coding, design, ideas, fantastical inventions, etc. etc. copyright 2016 Kyle Conrad */
/* Contact: kyle@kyleconrad.com */
/**
 * Eric Meyer's Reset CSS v2.0 (http://meyerweb.com/eric/tools/css/reset/)
 * http://cssreset.com
 */
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline; }

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block; }

body {
  line-height: 1; }

ol, ul {
  list-style: none; }

blockquote, q {
  quotes: none; }

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

/* MIX-INS & FUNCTIONS */
/* ADDITIONAL RESET */
html {
  min-height: 100%;
  height: 100%;
  -webkit-text-size-adjust: none;
  background: white; }

body {
  height: 100%;
  width: 100%;
  position: relative;
  overflow-x: hidden; }

* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }
  *:before, *:after {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box; }

/* CLEAR */
.clearfix:after {
  clear: both;
  display: table;
  content: ''; }

/* INCLUDED */
/* VARIABLES */
/* GRID */
nav,
div,
article,
section,
main,
footer,
header {
  display: block;
  position: relative; }

.content-block {
  width: 42.5rem;
  max-width: 85%;
  margin: 0 auto; }

.column {
  width: 85%;
  margin: 0 auto;
  max-width: 100rem; }

.grid_row {
  clear: both;
  width: 100%; }

.full,
.half,
.third,
.two-third {
  margin-bottom: 20px; }

.full {
  clear: both;
  width: 100%; }

.half {
  width: 50%;
  padding-right: 10px;
  padding-left: 0; }
  .half:last-child {
    padding-right: 0;
    padding-left: 10px; }
    @media only screen and (max-width: 700px) {
      .half:last-child {
        padding-left: 0;
        padding-right: 0; } }

.third {
  width: -moz-calc(100% / 3);
  width: -o-calc(100% / 3);
  width: -webkit-calc(100% / 3);
  width: calc(100% / 3);
  padding-right: 14px;
  padding-left: 14px; }
  .third:first-child {
    padding-left: 0; }
    @media only screen and (max-width: 700px) {
      .third:first-child {
        padding-left: 0;
        padding-right: 0; } }
  .third:not(:first-child):not(:last-child) {
    padding-left: 7px;
    padding-right: 7px; }
    @media only screen and (max-width: 700px) {
      .third:not(:first-child):not(:last-child) {
        padding-left: 0;
        padding-right: 0; } }
  .third:last-child {
    padding-right: 0; }
    @media only screen and (max-width: 700px) {
      .third:last-child {
        padding-left: 0;
        padding-right: 0; } }

.two-third {
  width: -moz-calc((100% / 3) * 2);
  width: -o-calc((100% / 3) * 2);
  width: -webkit-calc((100% / 3) * 2);
  width: calc((100% / 3) * 2);
  padding-right: 6px;
  padding-left: 0; }
  .two-third:last-child {
    padding-left: 6px;
    padding-right: 0; }
    @media only screen and (max-width: 700px) {
      .two-third:last-child {
        padding-left: 0;
        padding-right: 0; } }

.half,
.third,
.two-third {
  float: left; }
  @media only screen and (max-width: 700px) {
    .half,
    .third,
    .two-third {
      width: 100%;
      margin-right: 0;
      padding-left: 0;
      padding-right: 0; } }

.no-margin-bottom {
  margin-bottom: 0; }

/* Z-INDEX & LAYERS */
nav {
  z-index: 100; }

.hero-main {
  z-index: 20; }

/* GLYPHS */
/* TEXT SETTINGS */
* {
  text-rendering: optimizeLegibility;
  -webkit-font-feature-settings: "kern";
  -moz-font-feature-settings: "kern";
  -moz-font-feature-settings: "kern=1";
  font-feature-settings: "kern" 1;
  font-kerning: normal;
  color: #1a1a1a;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

h1,
h2,
h3,
h4 {
  letter-spacing: 0.2em;
  color: #1a1a1a; }

h1,
h3,
h4 {
  font-family: "mono45-headline", monospace; }

h2,
.caption {
  font-family: "motor", monospace; }

h1 {
  font-size: 1em; }

h2 {
  font-size: 1.25em;
  text-indent: 0.2em;
  line-height: 1.2; }
  h2 span {
    display: block; }

h3 {
  font-size: 0.85em;
  line-height: 1.1; }
  h3.invisible {
    opacity: 0;
    visibility: hidden; }

h4 {
  font-size: 0.7em;
  line-height: 1.5; }
  h4 a {
    display: inline-block;
    position: relative;
    text-decoration: none; }
    h4 a:after {
      display: block;
      position: absolute;
      left: 0;
      right: 0.2em;
      top: 92%;
      height: 1px;
      background: black;
      content: '';
      opacity: 0.25; }
    h4 a:hover:after, h4 a:active:after {
      opacity: 1; }

p {
  font-family: Georgia, serif;
  font-size: 1.2em;
  line-height: 1.65;
  color: #1a1a1a; }
  p:only-of-type {
    margin-top: 2rem;
    margin-bottom: 2rem; }
  p em {
    font-style: italic; }
  p strong {
    font-weight: bold; }
  p a {
    font-weight: bold;
    text-decoration: none; }
    p a:hover, p a:active {
      text-decoration: underline; }

.caption {
  display: block;
  padding-left: 3px;
  padding-right: 3px;
  font-size: 0.85em;
  line-height: 1.4;
  letter-spacing: 0.025em;
  text-transform: uppercase; }

.nav-link {
  background: white;
  color: #1a1a1a;
  font-family: "mono45-headline", monospace;
  font-size: 0.75em;
  letter-spacing: 0.25em;
  text-decoration: none; }
  .nav-link:hover, .nav-link:active {
    background: #1a1a1a;
    color: white; }
    .nav-link:hover span, .nav-link:active span {
      color: white; }

.hero-headline {
  display: -webkit-box;
  display: -moz-box;
  display: box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -moz-box-align: center;
  box-align: center;
  -webkit-align-items: center;
  -moz-align-items: center;
  -ms-align-items: center;
  -o-align-items: center;
  align-items: center;
  -ms-flex-align: center;
  height: 50%;
  width: 100%;
  padding: 0 10px; }

.headline-year {
  margin: auto; }

.hero-digits,
.header-digits {
  font-family: "motor", monospace;
  font-size: 0.55em;
  letter-spacing: 0.2em;
  line-height: 1.2; }

.button-cta {
  display: -webkit-box;
  display: -moz-box;
  display: box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -moz-box-pack: center;
  box-pack: center;
  -webkit-justify-content: center;
  -moz-justify-content: center;
  -ms-justify-content: center;
  -o-justify-content: center;
  justify-content: center;
  -ms-flex-pack: center;
  -webkit-box-align: center;
  -moz-box-align: center;
  box-align: center;
  -webkit-align-items: center;
  -moz-align-items: center;
  -ms-align-items: center;
  -o-align-items: center;
  align-items: center;
  -ms-flex-align: center;
  width: 100%;
  height: 100%;
  background: rgba(26, 26, 26, 0.25);
  color: #1a1a1a;
  font-family: "mono45-headline", monospace;
  font-size: 0.85em;
  letter-spacing: 0.2em;
  text-decoration: none;
  line-height: 1.1; }
  .button-cta:hover, .button-cta:active {
    background: #1a1a1a;
    color: white; }

/* IMAGES */
img {
  display: block;
  width: 100%;
  height: auto;
  margin: 0;
  padding: 0; }
  img.bordered {
    border: 1px solid #1a1a1a; }
  img.lazyload {
    background-color: rgba(26, 26, 26, 0.1);
    background-image: url("/img/main/load.gif");
    background-repeat: no-repeat;
    background-size: 24px 24px;
    background-position: center center; }
    @media only screen and (max-width: 700px) {
      img.lazyload {
        background-size: 16px 16px; } }
  img.lazyloaded {
    background: #1a1a1a; }
  img.padded {
    padding: 0.75rem 2.5rem 1.5rem; }
    @media only screen and (max-width: 700px) {
      img.padded {
        padding: 0.7rem 0 1.5rem; } }

.nav-logo {
  display: block;
  width: 2.5rem;
  height: 2.5rem;
  padding: 7px 6px 0;
  background: #1a1a1a; }

.hero-main-logo {
  width: 3.5rem;
  height: 3.5rem;
  padding: 0 8px;
  margin-bottom: -2px;
  background: #1a1a1a; }

.work-logo {
  width: auto;
  height: auto;
  max-width: 24rem;
  max-height: 12rem;
  margin: 0 auto 6rem; }
  @media only screen and (max-width: 700px) {
    .work-logo {
      margin-bottom: 4rem;
      max-width: 12rem;
      max-height: 8rem; } }

.work-hero {
  margin-bottom: 5rem; }
  @media only screen and (max-width: 700px) {
    .work-hero {
      margin-bottom: 4rem; } }

/* CONTENT CONTAINERS */
.detail-container {
  display: -webkit-box;
  display: -moz-box;
  display: box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -moz-box-orient: horizontal;
  box-orient: horizontal;
  -webkit-flex-direction: row;
  -moz-flex-direction: row;
  flex-direction: row;
  -ms-flex-direction: row;
  -webkit-box-align: stretch;
  -moz-box-align: stretch;
  box-align: stretch;
  -webkit-align-items: stretch;
  -moz-align-items: stretch;
  -ms-align-items: stretch;
  -o-align-items: stretch;
  align-items: stretch;
  -ms-flex-align: stretch;
  -webkit-box-pack: start;
  -moz-box-pack: start;
  box-pack: start;
  -webkit-justify-content: flex-start;
  -moz-justify-content: flex-start;
  -ms-justify-content: flex-start;
  -o-justify-content: flex-start;
  justify-content: flex-start;
  -ms-flex-pack: start;
  -webkit-align-content: flex-start;
  -moz-align-content: flex-start;
  align-content: flex-start;
  -ms-flex-line-pack: start;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -moz-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin: auto; }

.detail-block {
  padding: 10px; }

.detail-block-small {
  padding: 5px; }

.detail-nowrap {
  -webkit-box-lines: single;
  -moz-box-lines: single;
  box-lines: single;
  -webkit-flex-wrap: nowrap;
  -moz-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap; }

.detail-fill {
  -webkit-box-flex: 100%;
  -moz-box-flex: 100%;
  box-flex: 100%;
  -webkit-flex: 100%;
  -moz-flex: 100%;
  -ms-flex: 100%;
  flex: 100%; }

.detail-half {
  -webkit-box-flex: 50%;
  -moz-box-flex: 50%;
  box-flex: 50%;
  -webkit-flex: 50%;
  -moz-flex: 50%;
  -ms-flex: 50%;
  flex: 50%; }

.detail-grow {
  -webkit-flex-grow: 1;
  -moz-flex-grow: 1;
  flex-grow: 1;
  -ms-flex-positive: 1; }

.detail-border {
  border: 1px solid #1a1a1a; }

.detail-border-top {
  border-top: 1px solid #1a1a1a; }

.detail-border-top-large {
  border-top-width: 10px; }

.detail-border-bottom {
  border-bottom: 1px solid #1a1a1a; }

.detail-border-bottom-large {
  border-bottom-width: 10px; }

.detail-border-right {
  border-right: 1px solid #1a1a1a; }

.detail-border-left {
  border-left: 1px solid #1a1a1a; }

.detail-year {
  display: -webkit-box;
  display: -moz-box;
  display: box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
  padding: 10px 25px; }

.detail-stripe {
  background: url("/img/main/stripe.png");
  background-size: 10px auto; }

/* NAVIGATION */
nav {
  display: -webkit-box;
  display: -moz-box;
  display: box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -moz-box-orient: horizontal;
  box-orient: horizontal;
  -webkit-flex-direction: row;
  -moz-flex-direction: row;
  flex-direction: row;
  -ms-flex-direction: row;
  -webkit-box-align: stretch;
  -moz-box-align: stretch;
  box-align: stretch;
  -webkit-align-items: stretch;
  -moz-align-items: stretch;
  -ms-align-items: stretch;
  -o-align-items: stretch;
  align-items: stretch;
  -ms-flex-align: stretch;
  -webkit-box-pack: start;
  -moz-box-pack: start;
  box-pack: start;
  -webkit-justify-content: flex-start;
  -moz-justify-content: flex-start;
  -ms-justify-content: flex-start;
  -o-justify-content: flex-start;
  justify-content: flex-start;
  -ms-flex-pack: start;
  -webkit-align-content: flex-start;
  -moz-align-content: flex-start;
  align-content: flex-start;
  -ms-flex-line-pack: start;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -moz-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  width: 100%;
  background: white;
  border-bottom: 1px solid #1a1a1a;
  -webkit-transform: translate3d(0, -100%, 0);
  -moz-transform: translate3d(0, -100%, 0);
  -ms-transform: translate3d(0, -100%, 0);
  -o-transform: translate3d(0, -100%, 0);
  transform: translate3d(0, -100%, 0);
  transition: 0.25s;
  -webkit-perspective: 1000;
  -moz-perspective: 1000;
  perspective: 1000; }
  nav.visible {
    -webkit-transform: translate3d(0, 0, 0);
    -moz-transform: translate3d(0, 0, 0);
    -ms-transform: translate3d(0, 0, 0);
    -o-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0); }

.nav-link {
  display: -webkit-box;
  display: -moz-box;
  display: box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -moz-box-align: center;
  box-align: center;
  -webkit-align-items: center;
  -moz-align-items: center;
  -ms-align-items: center;
  -o-align-items: center;
  align-items: center;
  -ms-flex-align: center;
  height: 100%;
  padding: 5px 31px; }

/* HEADER */
.hero-digits,
.header-digits {
  display: block;
  position: absolute;
  left: 100%;
  top: 100%;
  -webkit-transform-origin: left top;
  -moz-transform-origin: left top;
  -ms-transform-origin: left top;
  -o-transform-origin: left top;
  transform-origin: left top;
  -webkit-transform: rotate(-90deg);
  -moz-transform: rotate(-90deg);
  -ms-transform: rotate(-90deg);
  -o-transform: rotate(-90deg);
  transform: rotate(-90deg); }
  .mobile .hero-digits, .mobile
  .header-digits {
    display: none; }

.hero-digits {
  left: -moz-calc(100% + 10px);
  left: -o-calc(100% + 10px);
  left: -webkit-calc(100% + 10px);
  left: calc(100% + 10px);
  top: -moz-calc(100% + 10px);
  top: -o-calc(100% + 10px);
  top: -webkit-calc(100% + 10px);
  top: calc(100% + 10px); }
  @media only screen and (max-width: 700px) {
    .hero-digits {
      left: -moz-calc(100% + 5px);
      left: -o-calc(100% + 5px);
      left: -webkit-calc(100% + 5px);
      left: calc(100% + 5px); } }

.header-digits {
  left: -moz-calc(100% + 10px);
  left: -o-calc(100% + 10px);
  left: -webkit-calc(100% + 10px);
  left: calc(100% + 10px);
  top: 100%; }
  @media only screen and (max-width: 700px) {
    .header-digits {
      left: -moz-calc(100% + 5px);
      left: -o-calc(100% + 5px);
      left: -webkit-calc(100% + 5px);
      left: calc(100% + 5px); } }

.header-digits-row {
  display: block; }

/* HERO */
.hero-main {
  display: -webkit-box;
  display: -moz-box;
  display: box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100vh;
  background: white; }

/* MAIN AREAS */
.work-block {
  padding: 12rem 0; }

.work-container {
  padding-top: 7rem; }
  @media only screen and (max-width: 700px) {
    .work-container {
      padding-top: 5rem; } }

/* WORK */
.browser {
  width: 100%;
  height: 34px;
  background-image: url("/img/main/browser-btn.png"), url("/img/main/browser-chrome.png");
  background-repeat: no-repeat, repeat-x;
  background-size: auto 100%;
  background-position: left center;
  border-radius: 5px 5px 0 0;
  z-index: 10;
  position: relative;
  border: 1px solid #1a1a1a;
  border-bottom: 0; }
  .browser:after {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: rgba(0, 0, 0, 0.2);
    display: block;
    content: ''; }
  @media only screen and (min-width: 802px) and (max-width: 1025px) {
    .browser {
      height: 28px; } }
  @media only screen and (min-width: 701px) and (max-width: 801px) {
    .browser {
      height: 24px; } }
  @media only screen and (max-width: 700px) {
    .browser {
      height: 18px;
      border-radius: 3px 3px 0 0; } }

.video-load.browser-video {
  padding-top: 56.54296875%;
  background-color: rgba(26, 26, 26, 0.1);
  background-image: url("/img/main/load.gif");
  background-repeat: no-repeat;
  background-size: 24px 24px;
  background-position: center center;
  border-radius: 0 0 5px 5px;
  border: 1px solid #1a1a1a;
  border-top: 0; }
  @media only screen and (max-width: 700px) {
    .video-load.browser-video {
      background-size: 16px 16px; } }

.fluid-width-video-wrapper {
  -webkit-transform: rotate(0deg);
  -moz-transform: rotate(0deg);
  -ms-transform: rotate(0deg);
  -o-transform: rotate(0deg);
  transform: rotate(0deg);
  border-radius: 0 0 5px 5px;
  overflow: hidden;
  background: #1a1a1a;
  border: 1px solid #1a1a1a;
  border-top: 0; }

/* FOOTER */
/* ANIMATION */
#logo-pupil {
  -webkit-animation: shifty 7s ease;
  -moz-animation: shifty 7s ease;
  animation: shifty 7s ease;
  -webkit-animation-delay: 3s;
  -moz-animation-delay: 3s;
  animation-delay: 3s;
  -webkit-animation-iteration-count: infinite;
  -moz-animation-iteration-count: infinite;
  animation-iteration-count: infinite; }

@-webkit-keyframes shifty {
  0% {
    -webkit-transform: translate3d(0, 0, 0); }
  14% {
    -webkit-transform: translate3d(0, 0, 0); }
  25% {
    -webkit-transform: translate3d(-20px, 0, 0); }
  27% {
    -webkit-transform: translate3d(-20px, 0, 0); }
  42% {
    -webkit-transform: translate3d(20px, 0, 0); }
  44% {
    -webkit-transform: translate3d(20px, 0, 0); }
  55% {
    -webkit-transform: translate3d(0, 0, 0); }
  100% {
    -webkit-transform: translate3d(0, 0, 0); } }

@-moz-keyframes shifty {
  0% {
    -moz-transform: translate3d(0, 0, 0); }
  14% {
    -moz-transform: translate3d(0, 0, 0); }
  25% {
    -moz-transform: translate3d(-20px, 0, 0); }
  27% {
    -moz-transform: translate3d(-20px, 0, 0); }
  42% {
    -moz-transform: translate3d(20px, 0, 0); }
  44% {
    -moz-transform: translate3d(20px, 0, 0); }
  55% {
    -moz-transform: translate3d(0, 0, 0); }
  100% {
    -moz-transform: translate3d(0, 0, 0); } }

@keyframes shifty {
  0% {
    -webkit-transform: translate3d(0, 0, 0);
    -moz-transform: translate3d(0, 0, 0);
    -ms-transform: translate3d(0, 0, 0);
    -o-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0); }
  14% {
    -webkit-transform: translate3d(0, 0, 0);
    -moz-transform: translate3d(0, 0, 0);
    -ms-transform: translate3d(0, 0, 0);
    -o-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0); }
  25% {
    -webkit-transform: translate3d(-20px, 0, 0);
    -moz-transform: translate3d(-20px, 0, 0);
    -ms-transform: translate3d(-20px, 0, 0);
    -o-transform: translate3d(-20px, 0, 0);
    transform: translate3d(-20px, 0, 0); }
  27% {
    -webkit-transform: translate3d(-20px, 0, 0);
    -moz-transform: translate3d(-20px, 0, 0);
    -ms-transform: translate3d(-20px, 0, 0);
    -o-transform: translate3d(-20px, 0, 0);
    transform: translate3d(-20px, 0, 0); }
  42% {
    -webkit-transform: translate3d(20px, 0, 0);
    -moz-transform: translate3d(20px, 0, 0);
    -ms-transform: translate3d(20px, 0, 0);
    -o-transform: translate3d(20px, 0, 0);
    transform: translate3d(20px, 0, 0); }
  44% {
    -webkit-transform: translate3d(20px, 0, 0);
    -moz-transform: translate3d(20px, 0, 0);
    -ms-transform: translate3d(20px, 0, 0);
    -o-transform: translate3d(20px, 0, 0);
    transform: translate3d(20px, 0, 0); }
  55% {
    -webkit-transform: translate3d(0, 0, 0);
    -moz-transform: translate3d(0, 0, 0);
    -ms-transform: translate3d(0, 0, 0);
    -o-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0); }
  100% {
    -webkit-transform: translate3d(0, 0, 0);
    -moz-transform: translate3d(0, 0, 0);
    -ms-transform: translate3d(0, 0, 0);
    -o-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0); } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
